errs = [14.271073251400354, 4.4954833984375, 5.56388909476144, 6.196920643682065, 6.664657358022836, 6.891712861902573, 7.1763503615920605, 6.571551272743626, 4.992366709607713, 4.78449366114161, 5.490493292557566, 5.890874322855248, 4.805967269405242, 4.880349520979257, 5.656703186035156, 5.069080352783203, 4.570537936302923, 4.320379038326076, 4.745806415264423, 5.231555045919215, 4.315985345221185, 4.038530169792895, 4.810368757981521, 5.072742662931743, 4.280682307417675, 4.215121146960136, 4.979985092625474, 5.118919372558594, 4.547625469905074, 4.462376006662029, 5.451267589222301, 5.781919612440952, 4.7954778497869315, 4.944575718470982, 5.964590816174523, 5.503629244290865, 5.031408372268178, 4.79665333002954, 6.55117919921875, 7.281437683105469, 7.428637368338449, 7.430127692945076, 7.4384694285206985, 6.743340386284722, 5.669454872061353, 5.014883808705998, 10.539547390407986, 9.52251942952474, 9.634954279119318, 10.334065507097941, 9.948531539351851, 10.425411023591694, 10.514535757211538]
bins = [20.        ,  23.01886792,  26.03773585,  29.05660377,
        32.0754717 ,  35.09433962,  38.11320755,  41.13207547,
        44.1509434 ,  47.16981132,  50.18867925,  53.20754717,
        56.22641509,  59.24528302,  62.26415094,  65.28301887,
        68.30188679,  71.32075472,  74.33962264,  77.35849057,
        80.37735849,  83.39622642,  86.41509434,  89.43396226,
        92.45283019,  95.47169811,  98.49056604, 101.50943396,
       104.52830189, 107.54716981, 110.56603774, 113.58490566,
       116.60377358, 119.62264151, 122.64150943, 125.66037736,
       128.67924528, 131.69811321, 134.71698113, 137.73584906,
       140.75471698, 143.77358491, 146.79245283, 149.81132075,
       152.83018868, 155.8490566 , 158.86792453, 161.88679245,
       164.90566038, 167.9245283 , 170.94339623, 173.96226415,
       176.98113208]

print (len(bins))
print (len(errs))

def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield tuple(l[i:i + n])



new_bins = []
new_errs = []

groups = (list(chunks(range(len(bins)),3)))
if len(groups[-1])!=3:
    groups = groups[:-1]

done = True
for (i0,i1,i2) in groups:
    merged_width = bins[i2] - bins[i0]
    avg_err = 0.5 * (errs[i0] + errs[i1])

    if avg_err <= merged_width:
        done = False
        new_bins.append(bins[i0])
        new_errs.append(avg_err)
    else:

        new_bins.append(bins[i0])
        new_bins.append(bins[i1])
        new_errs.append(errs[i0])
        new_errs.append(errs[i1])

print bins

print new_bins


